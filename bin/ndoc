#!/usr/bin/env node
'use strict';

var program = require('commander');
var exec = require('child_process').exec;
var Util = require('../lib/util');
var NDoc = require('../lib');

//
// parse options
//
program
  .version('0.0.1')
  .option('-s, --source <>', 'Source files location [./lib]', 'lib')
  .option('-o, --output <>', 'Resulting file(s) location [./docs]', 'docs')
  .option('-f, --format <>', 'Documentation format [html]', 'html')
  .option('-i, --index <>', 'Index file [./README.md]', 'README.md')
  .option('--package-json <>', 'Package description file [./package.json]', 'package.json')
  .option('--package-name <>', 'Package name', '')
  .option('--package-version <>', 'Project version', '')
  // FIXME: what's that?
  .option('--package-title <>', 'Package title', '')
  .option('--package-url <>', 'Package URL', '')
  // FIXME: do we need that?
  .option('--view-source-label <>', 'Text for "View source" link', 'View source on GitHub &rarr;')
  .option('--template <>', 'Custom templates', __dirname + '/../templates')
  .option('--skeleton <>', 'Custom skeleton', __dirname + '/../skeleton')
  .parse(process.argv);

//
// read missing data from package.json, if any
//
try {
  var package_json = JSON.parse(Util.read(program.packageJson));
  program.packageName = program.packageName || package_json.name || '';
  program.packageVersion = program.packageVersion || package_json.version || '';
  program.packageUrl = program.packageUrl || (package_json.repository && package_json.repository.url || package_json.repository) || '';
  program.packageUrl = program.packageUrl.replace('git://', 'https://').replace(/(\.git$|$)/, '/blob/master');
  program.packageTitle = program.packageTitle || package_json.description || program.packageName || '';
} catch(err) {}
//console.error(program); process.exit(0);

//
// collect sources
//
var files = [];
Util.walk(program.source, '\.js$', function(filename, stat, cb) {
  //console.log('Processing', filename);
  files.push(filename);
  cb();
}, function(err) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  // build tree
  var ndoc = new NDoc(files, {
    root: program.source,
    href: program.packageUrl
  });
  //console.log(ndoc.toJSON());

  // output tree
  var output = program.output;
  switch (program.format) {

    case 'json':
      Util.write(output, ndoc.toJSON(program));
      break;

    case 'js':
      Util.write(output, 'var ndoc = ' + ndoc.toJSON(program) + ';');
      break;

    case 'html':
      Util.rm_rf(output, function(err) {
        if (err) {
          console.error('Removing older documentation', err);
          process.exit(1);
        }
        Util.cp_a(program.skeleton, output, function(err) {
          if (err) {
            console.error('Copying skeleton', err);
            process.exit(1);
          }
          var html = ndoc.toHTML(program);
          Util.write(output + '/index.html', html);
        });
      });
      break;

    default:
      console.error(program.format + ': not supported')
      process.exit(1);

  }
});
